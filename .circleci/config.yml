version: 2.1

parameters:
  project-folder:
    type: string
    default: "src/Lansweeper.Heijden.Dns/"

  csproj-file:
    type: string
    default: "Lansweeper.Heijden.Dns.csproj"

  git-primary-branch:
    type: string
    default: "master"

executors:
  node:
    docker:
      - image: cimg/node:18.9.0

orbs:
  win: circleci/windows@5.0

commands:
  nuget-prepare:
    description: "generate nuget.config file to pull in (and publish) nuget dependencies "
    steps:
      - run:
          name: Create local nuget config file
          command: |
            $xml = "<?xml version='1.0' encoding='utf-8'?>
            <configuration>
              <packageSources>
                <add key='github' value='https://nuget.pkg.github.com/Lansweeper/index.json' />
              </packageSources>
              <packageSourceCredentials>
                <github>
                  <add key='Username' value='$env:GITHUB_USER' />
                  <add key='ClearTextPassword' value='$env:GITHUB_TOKEN' />
                </github>
              </packageSourceCredentials>
            </configuration>"
            Out-File -FilePath nuget.config -InputObject $xml -Encoding ASCII

  install-deps:
    description: "Install and cache dependencies"
    steps:
      # Download and cache dependencies
      - restore_cache:
          keys:
            - << pipeline.parameters.project-folder >>-dependencies-{{ checksum "yarn.lock" }}
      - run: yarn install --pure-lockfile
      - save_cache:
          paths:
            - node_modules
          key: << pipeline.parameters.project-folder >>-dependencies-{{ checksum "yarn.lock" }}

jobs:
  build:
    executor: win/default

    steps:
      - checkout
      - nuget-prepare
      - run: dotnet build << pipeline.parameters.project-folder >><< pipeline.parameters.csproj-file >> --configuration Release

      - persist_to_workspace:
          root: .
          paths:
            - .

  release:
    executor: node
    steps:
      - attach_workspace:
          at: .
      - run: git config user.email "development@lansweeper.com"
      - run: git config user.name "circleCI-automated-commit"
      - install-deps
      - run:
          name: install dotnet SDK
          command: |
            wget https://packages.microsoft.com/config/ubuntu/23.10/packages-microsoft-prod.deb -O packages-microsoft-prod.deb
            sudo dpkg -i packages-microsoft-prod.deb
            sudo apt-get update; \
            sudo apt-get install -y apt-transport-https && \
            sudo apt-get update && \
            sudo apt-get install -y dotnet-sdk-8.0
      - run:
          name: Increase version with semantic-release
          command: yarn run release

      - run:
          name: Persist next version to environment
          command: echo "export VERSION=$(cat package.json | jq --raw-output '.version')" >> $BASH_ENV

      - run:
          name: Replace nuspec version string with next release
          command: sed -i -E 's/<version>/<version>$VERSION/' src/Lansweeper.Heijden.Dns.nuspec

      - run:
          name: Pack the nuget
          command: dotnet pack << pipeline.parameters.project-folder >><< pipeline.parameters.csproj-file >> --configuration Release

      - run:
          name: Push the nuget
          command: dotnet nuget push << pipeline.parameters.project-folder >>bin/Release/Lansweeper.Heijden.Dns.$VERSION.nupkg --source "github" --api-key $GITHUB_TOKEN

      - persist_to_workspace:
          root: .
          paths:
            - .

  update_catalog_info:
    docker: 
        - image: mcr.microsoft.com/dotnet/sdk:8.0
    steps:
      - attach_workspace:
          at: . 
     
      - run:
          name: install jq 
          command: apt update && apt install jq -y && apt-get install -y openssh-client      
                
      - run: 
          name: Config git
          command: |
            git remote set-url origin https://$GH_USERNAME:$GH_TOKEN@github.com/$CIRCLE_PROJECT_USERNAME/$CIRCLE_PROJECT_REPONAME.git
            git config --global core.sshCommand "ssh -o StrictHostKeyChecking=no"
            
      - run:
          name: Get Lansweeper.DotNetCatalogInfoGenerator
          command: |
            # Fetch the latest release data
            release_data=$(curl -s -H "Authorization: token ${GITHUB_TOKEN}" https://api.github.com/repos/Lansweeper/Lansweeper.DotNetCatalogInfoGenerator/releases/latest)
            
            echo "Json:"
            echo "$release_data"
                        
            # Extract the asset URLs and names for .json and .dll files (On Linux we don't need the exe file. On Windows we can remove the 'select')
            assets=$(echo $release_data | jq -r '.assets[] | select(.name | endswith(".json") or endswith(".dll")) | "\(.url) \(.name)"')
                        
            # Download each asset
            echo "$assets" | while read -r url name; do
              echo "Downloading $name from $url"
              curl -L -H "Accept: application/octet-stream" -H "Authorization: Bearer ${GITHUB_TOKEN}" -H "X-GitHub-Api-Version: 2022-11-28" -o $name $url
            done
                                      
      - run:
          name: Create the catalog-info.yaml
          command: dotnet Lansweeper.DotNetCatalogInfoGenerator.dll -t nuget -f << pipeline.parameters.project-folder >> -r ${CIRCLE_PROJECT_REPONAME}
          
      - run:
          name: Add catalog-info.yaml files to git
          command: |
            git add << pipeline.parameters.project-folder >>catalog-info.yaml
            git commit -m ":bento: Update generated files [skip ci]"
            git push origin $CIRCLE_BRANCH
            
workflows:
  version: 2

  ci_on_pr:
    jobs:
      - build:
          context:
            - lec-github-packages-rw
          filters:
            branches:
              ignore: << pipeline.parameters.git-primary-branch >>

  ci_and_release_primary_branch:
    jobs:
      - build:
          context:
            - lec-github-packages-rw
          filters:
            branches:
              only: << pipeline.parameters.git-primary-branch >>

      - release:
          context:
            - lec-github-packages-rw
          requires:
            - build
          filters:
            branches:
              only: << pipeline.parameters.git-primary-branch >>
              
      - update_catalog_info:
          context:
            - lec-github-release
          requires:
            - release
          filters:
            branches:
              only: << pipeline.parameters.git-primary-branch >>